{"$message_type":"diagnostic","message":"non-exhaustive patterns: `&InsnKind::I32Extend8S`, `&InsnKind::I32Extend16S`, `&InsnKind::I64Extend8S` and 2 more not covered","code":{"code":"E0004","explanation":"This error indicates that the compiler cannot guarantee a matching pattern for\none or more possible inputs to a match expression. Guaranteed matches are\nrequired in order to assign values to match expressions, or alternatively,\ndetermine the flow of execution.\n\nErroneous code example:\n\n```compile_fail,E0004\nenum Terminator {\n    HastaLaVistaBaby,\n    TalkToMyHand,\n}\n\nlet x = Terminator::HastaLaVistaBaby;\n\nmatch x { // error: non-exhaustive patterns: `HastaLaVistaBaby` not covered\n    Terminator::TalkToMyHand => {}\n}\n```\n\nIf you encounter this error you must alter your patterns so that every possible\nvalue of the input type is matched. For types with a small number of variants\n(like enums) you should probably cover all cases explicitly. Alternatively, the\nunderscore `_` wildcard pattern can be added after all other patterns to match\n\"anything else\". Example:\n\n```\nenum Terminator {\n    HastaLaVistaBaby,\n    TalkToMyHand,\n}\n\nlet x = Terminator::HastaLaVistaBaby;\n\nmatch x {\n    Terminator::TalkToMyHand => {}\n    Terminator::HastaLaVistaBaby => {}\n}\n\n// or:\n\nmatch x {\n    Terminator::TalkToMyHand => {}\n    _ => {}\n}\n```\n"},"level":"error","spans":[{"file_name":"/Users/ksk/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/wain-exec-0.3.0/src/machine.rs","byte_start":16313,"byte_end":16323,"line_start":449,"line_end":449,"column_start":15,"column_end":25,"is_primary":true,"text":[{"text":"        match &self.kind {","highlight_start":15,"highlight_end":25}],"label":"patterns `&InsnKind::I32Extend8S`, `&InsnKind::I32Extend16S`, `&InsnKind::I64Extend8S` and 2 more not covered","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`InsnKind` defined here","code":null,"level":"note","spans":[{"file_name":"index.crates.io-1949cf8c6b5b557f/wain-ast-0.2.2/src/lib.rs","byte_start":4831,"byte_end":4848,"line_start":193,"line_end":193,"column_start":1,"column_end":18,"is_primary":true,"text":[],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"index.crates.io-1949cf8c6b5b557f/wain-ast-0.2.2/src/lib.rs","byte_start":8612,"byte_end":8623,"line_start":397,"line_end":397,"column_start":5,"column_end":16,"is_primary":false,"text":[],"label":"not covered","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"index.crates.io-1949cf8c6b5b557f/wain-ast-0.2.2/src/lib.rs","byte_start":8629,"byte_end":8641,"line_start":398,"line_end":398,"column_start":5,"column_end":17,"is_primary":false,"text":[],"label":"not covered","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"index.crates.io-1949cf8c6b5b557f/wain-ast-0.2.2/src/lib.rs","byte_start":8647,"byte_end":8658,"line_start":399,"line_end":399,"column_start":5,"column_end":16,"is_primary":false,"text":[],"label":"not covered","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"index.crates.io-1949cf8c6b5b557f/wain-ast-0.2.2/src/lib.rs","byte_start":8664,"byte_end":8676,"line_start":400,"line_end":400,"column_start":5,"column_end":17,"is_primary":false,"text":[],"label":"not covered","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"index.crates.io-1949cf8c6b5b557f/wain-ast-0.2.2/src/lib.rs","byte_start":8682,"byte_end":8694,"line_start":401,"line_end":401,"column_start":5,"column_end":17,"is_primary":false,"text":[],"label":"not covered","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"the matched value is of type `&InsnKind`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"ensure that all possible cases are being handled by adding a match arm with a wildcard pattern as shown, or multiple match arms","code":null,"level":"help","spans":[{"file_name":"/Users/ksk/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/wain-exec-0.3.0/src/machine.rs","byte_start":48104,"byte_end":48104,"line_start":1033,"line_end":1033,"column_start":77,"column_end":77,"is_primary":true,"text":[{"text":"            F64ReinterpretI64 => machine.stack.write_top_type(f64::VAL_TYPE),","highlight_start":77,"highlight_end":77}],"label":null,"suggested_replacement":",\n            _ => todo!()","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0004]\u001b[0m\u001b[0m\u001b[1m: non-exhaustive patterns: `&InsnKind::I32Extend8S`, `&InsnKind::I32Extend16S`, `&InsnKind::I64Extend8S` and 2 more not covered\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/ksk/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/wain-exec-0.3.0/src/machine.rs:449:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m449\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        match &self.kind {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mpatterns `&InsnKind::I32Extend8S`, `&InsnKind::I32Extend16S`, `&InsnKind::I64Extend8S` and 2 more not covered\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: `InsnKind` defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mindex.crates.io-1949cf8c6b5b557f/wain-ast-0.2.2/src/lib.rs:193:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0mindex.crates.io-1949cf8c6b5b557f/wain-ast-0.2.2/src/lib.rs:397:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m |\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m = note: not covered\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0mindex.crates.io-1949cf8c6b5b557f/wain-ast-0.2.2/src/lib.rs:398:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m |\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m = note: not covered\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0mindex.crates.io-1949cf8c6b5b557f/wain-ast-0.2.2/src/lib.rs:399:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m |\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m = note: not covered\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0mindex.crates.io-1949cf8c6b5b557f/wain-ast-0.2.2/src/lib.rs:400:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m |\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m = note: not covered\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0mindex.crates.io-1949cf8c6b5b557f/wain-ast-0.2.2/src/lib.rs:401:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m |\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m = note: not covered\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the matched value is of type `&InsnKind`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern as shown, or multiple match arms\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1033\u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m            F64ReinterpretI64 => machine.stack.write_top_type(f64::VAL_TYPE)\u001b[0m\u001b[0m\u001b[38;5;10m,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1034\u001b[0m\u001b[0m\u001b[38;5;10m~             _ => todo!()\u001b[0m\u001b[0m,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 1 previous error","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 1 previous error\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"For more information about this error, try `rustc --explain E0004`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0004`.\u001b[0m\n"}
